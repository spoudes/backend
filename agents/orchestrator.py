import json
import os
from dotenv import load_dotenv
from pprint import pprint

from DocAndCourseAgent.DocAgentMain import DocAndCourseAgent
from course_agent.quiz_generator import QuizGeneratorAgent
from orchestrator_tools import merge_course_data
from liascript_generator import generate_liascript_from_json
from liascript_generator.validate_and_cleanify import validate_liascript, clean_liascript


load_dotenv()
#================–ó–∞–ø—É—Å–∫ —Ü–µ–ø–æ—á–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤==========
with open("doc1.txt", "w", encoding="utf-8") as f:
    f.write("–≠–π–Ω—à—Ç–µ–π–Ω —Å–æ–∑–¥–∞–ª —Ç–µ–æ—Ä–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")

with open("doc2.txt", "w", encoding="utf-8") as f:
    f.write("–ú–µ–Ω–¥–µ–ª–µ–µ–≤ —Å–æ–∑–¥–∞–ª —Ç–∞–±–ª–∏—Ü—É —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

user_files = ["doc1.txt", "doc2.txt"]   #—Ñ–∞–π–ª—ã —Å —Ñ—Ä–æ–Ω—Ç–∞

user_course_struct = {                  #–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞ —Å —Ñ—Ä–æ–Ω—Ç–∞
    "course_title": "–í–µ–ª–∏–∫–∏–µ —É—á–µ–Ω—ã–µ",
    "chapters": [
    {
        "title": "–§–∏–∑–∏–∫–∏",
        "content": "",
        "sub_topics": [
        {
            "title": "–≠–π–Ω—à—Ç–µ–π–Ω",
            "content": "",
            "sub_topics": []
        }
        ]
    },
    {
        "title": "–•–∏–º–∏–∫–∏",
        "content": "",
        "sub_topics": [
        {
            "title": "–ú–µ–Ω–¥–µ–ª–µ–µ–≤",
            "content": "",
            "sub_topics": []
        }
        ]
    }
    ]
}

initial_state = {
    "file_paths": user_files,
    "input_course_json": user_course_struct
}

final_state = DocAndCourseAgent.invoke(initial_state) 

populated_course = final_state["populated_course"]

#======–í—Ç–æ—Ä–æ–π –∞–≥–µ–Ω—Ç=======

QuizAgent = QuizGeneratorAgent(api_key=os.getenv("GOOGLE_API_KEY"),
                               model="gemini-2.5-flash",
                               temperature=0.7)

difficulty_dist = {
    "–ª–µ–≥–∫–∏–π": 1,
    "—Å—Ä–µ–¥–Ω–∏–π": 1,
    "—Å–ª–æ–∂–Ω—ã–π": 1
}

print("=" * 60)
print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤...")
print("=" * 60)

all_questions = QuizAgent.process_course(
    course_data=populated_course,
    questions_per_topic=3,  # 3 –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    difficulty_distribution=difficulty_dist
)

pre_out_put_filename = populated_course["course_title"]

output_file = QuizAgent.save_questions(questions=all_questions,
                         pre_output_file=pre_out_put_filename)

with open(f"{output_file}", 'r', encoding='utf-8') as f: # —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º question
    unpacked_question_file = json.load(f)

new_output_file = f"{pre_out_put_filename}_merge.json" # json –¥–ª—è 3 –∞–≥–µ–Ω—Ç–∞ —Å liaskript

merge_output_file = merge_course_data(course_file=populated_course,
                                      questions_file=unpacked_question_file,
                                      output_file=new_output_file)


print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è LiaScript —Ä–∞–∑–º–µ—Ç–∫–∏...")
liascript_markup = generate_liascript_from_json(json_data=merge_output_file,
                                                use_ai_validation=True)

print("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏...")
is_valid, message = validate_liascript(liascript_markup)

if is_valid:
    print(f"‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: {message}")
else:
    print(f"‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏: {message}")
    print("–ü—Ä–∏–º–µ–Ω—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É...")
    liascript_markup = clean_liascript(liascript_markup)
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, message = validate_liascript(liascript_markup)
    print(f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {message}")

output_file = 'course_output.md'
with open(output_file, 'w', encoding='utf-8') as f:
    f.write(liascript_markup)

print(f"\n‚úì LiaScript —Ä–∞–∑–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_file}")
print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(liascript_markup)} —Å–∏–º–≤–æ–ª–æ–≤")

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
print("\n" + "="*60)
print("–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–†:")
print("="*60)
print(liascript_markup[:500] + "...\n")



# with open("courses_src/course_1/–≤–µ–ª–∏–∫–∏–µ_—É—á–µ–Ω—ã–µ_final.json", 'r', encoding='utf-8') as f:
#     data = json.load(f)


# pprint(data, sort_dicts=False)
